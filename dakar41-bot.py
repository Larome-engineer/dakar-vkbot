import re

from func_for_states import *
from keyboard_creators import *
from dictionary import *

from privacy import token
from vkbottle.bot import Bot, Message
from vkbottle import GroupTypes, GroupEventType, VKAPIError, CtxStorage
from vkbottle import BaseStateGroup

ctx = CtxStorage()
bot = Bot(token=token)
bot.labeler.vbml_ignore_case = True


class RegData(BaseStateGroup):
    SIZE = 0
    BRAND = 1
    STATE = 2
    SEASON = 3
    STUDDED = 4
    TYPE = 5
    PHONE = 6
    USERNAME = 7


@bot.on.private_message(text=["–≤–µ—Ä–Ω–æ", "–Ω–µ –≤–µ—Ä–Ω–æ"])
async def check_handler(msg: Message):
    await checker(msg)


@bot.on.private_message(text=hello_words_list)
async def greetings_handler(msg: Message):
    user = await bot.api.users.get(msg.from_id)
    await msg.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {user[0].first_name}! üëãüèª")
    await msg.answer("–ú–µ–Ω—è –∑–æ–≤—É—Ç Dak. –Ø –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –º–∞–≥–∞–∑–∏–Ω–∞ Dakar41 ü§ñ")
    await options_keyboard(msg=msg)


@bot.on.private_message(text=gratitude_list)
async def gratitude_handler(msg: Message):
    await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –ü—Ä–∏–µ–∑–∂–∞–π—Ç–µ –∫ –Ω–∞–º —á–∞—â–µ!\n"
                     "–í—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –∑–∞–±–æ—Ç–∏—Ç—å—Å—è –æ –≤–∞—à–∏—Ö –º–∞—à–∏–Ω–∫–∞—Ö!üî•")


@bot.on.private_message(text="–º–µ–Ω—é")
async def menu_handler(msg: Message):
    await options_keyboard(msg=msg)


@bot.on.private_message(text="–ö–∞—Ç–∞–ª–æ–≥")
async def link_handler(msg: Message):
    await links_keyboard(msg=msg)


@bot.on.private_message(text="–ê–¥—Ä–µ—Å")
async def address_handler(msg: Message):
    await msg.answer(f"üè™ –ù–∞—à –∞–¥—Ä–µ—Å:\n{address}\n\n–†–∞–±–æ—Ç–∞–µ–º –∫—Ä—É–≥–ª–æ—Å—É—Ç–æ—á–Ω–æ üîß")
    await create_route_keyboard(msg=msg)


@bot.on.private_message(text=["–¥–∞", "–Ω–µ—Ç"])
async def route_handler(msg: Message):
    if msg.text == "–î–∞":
        await route_keyboard(msg=msg)
    elif msg.text == "–ù–µ—Ç":
        await options_keyboard(msg)


@bot.on.private_message(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contact_handler(msg: Message):
    await contacts_keyboard(msg=msg)


@bot.on.private_message(text="–î–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def info_handler(msg: Message):
    await msg.answer(f"üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞ üì¶\n\n{delivery_pay_txt}")


@bot.on.private_message(lev="–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def reg_handler(msg: Message):
    await bot.state_dispenser.set(msg.peer_id, RegData.SIZE)
    return about_size


@bot.on.private_message(state=RegData.SIZE)
async def size_handler(msg: Message):
    ctx.set("size", msg.text)
    await bot.state_dispenser.set(msg.peer_id, RegData.BRAND, something=1)
    return about_brand


@bot.on.private_message(state=RegData.BRAND)
async def brand_handler(msg: Message):
    ctx.set("brand", msg.text)
    await bot.state_dispenser.set(msg.peer_id, RegData.STATE)
    state = await bus_condition(msg)
    return state


@bot.on.private_message(state=RegData.STATE)
async def state_handler(msg: Message):
    if msg.text == "–ë/–£" or msg.text == "–ù–æ–≤–æ–µ":
        ctx.set("state", msg.text)
        await bot.state_dispenser.set(msg.peer_id, RegData.SEASON)
        season = await tire_season(msg)
        return season
    else:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –≤—ã—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö")


@bot.on.private_message(state=RegData.SEASON)
async def season_handler(msg: Message):
    if msg.text == "–õ–µ—Ç–Ω—è—è" or msg.text == "–ó–∏–º–Ω—è—è" or msg.text == "–ì—Ä—è–∑—å –ú–¢" or msg.text == "–ì—Ä—è–∑—å –ê–¢":
        ctx.set("season", msg.text)
        await bot.state_dispenser.set(msg.peer_id, RegData.STUDDED)
        studded = await tire_studding(msg)
        return studded
    else:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –≤—ã—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö")


@bot.on.private_message(state=RegData.STUDDED)
async def std_handler(msg: Message):
    if msg.text == "–®–∏–ø—ã" or msg.text == "–ë–µ–∑ —à–∏–ø–æ–≤":
        ctx.set("studded", msg.text)
        await bot.state_dispenser.set(msg.peer_id, RegData.TYPE)
        types = await tire_type(msg)
        return types
    else:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –≤—ã—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö")


@bot.on.private_message(state=RegData.TYPE)
async def phone_handler(msg: Message):
    if msg.text == "–û–±—ã—á–Ω–∞—è" or msg.text == "–ì—Ä—É–∑–æ–≤–∞—è –∏ LT":
        ctx.set("type", msg.text)
        await bot.state_dispenser.set(msg.peer_id, RegData.PHONE)
        return about_contact
    else:
        await msg.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∏–∑ –≤—ã—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö")


@bot.on.private_message(state=RegData.PHONE)
async def phone_handler(msg: Message):
    pattern = '[-()]'
    num = msg.text
    num = (re.sub(pattern, '', num.replace('+7', '8')))
    ctx.set("phone", num)
    await bot.state_dispenser.set(msg.peer_id, RegData.USERNAME)
    return "–ö–∞–∫ –º—ã –º–æ–∂–µ–º –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ –∫ –í–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?"


@bot.on.private_message(state=RegData.USERNAME)
async def type_handler(msg: Message):
    size = ctx.get("size")
    brand = ctx.get("brand")
    state = ctx.get("state")
    season = ctx.get("season")
    studded = ctx.get("studded")
    typing = ctx.get("type")
    number = ctx.get("phone")
    name = msg.text

    await msg.answer(f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –≤–µ—Ä–Ω–æ –ª–∏ –í—ã –≤–≤–µ–ª–∏ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:\n\n"
                     f"üî§ –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —à–∏–Ω—ã: {size}\n\n"
                     f"¬©Ô∏è –ú–∞—Ä–∫–∞ —à–∏–Ω—ã: {brand}\n\n"
                     f"‚ôª –°–æ—Å—Ç–æ—è–Ω–∏–µ: {state}\n\n"
                     f"üìÜ –ü—Ä–æ—Ç–µ–∫—Ç–æ—Ä (—Å–µ–∑–æ–Ω): {season}\n\n"
                     f"‚öô –®–∏–ø–æ–≤–∫–∞: {studded}\n\n"
                     f"üöú –¢–∏–ø —à–∏–Ω—ã: {typing}\n\n"
                     f"–í–∞—à–µ –∏–º—è: {name}\n"
                     f"–í–∞—à –Ω–æ–º–µ—Ä: {number}")

    await answer_keyboard(msg)
    await check_handler(msg)


@bot.on.private_message(text=bad_words_list)
async def bad_handler(msg: Message):
    await msg.answer(f"–ù—É —á—Ç–æ –∂–µ –í—ã —Ç–∞–∫ —Å—Ä–∞–∑—É... \n"
                     f"–ù–µ –≤—ã—Ä–∞–∂–∞–π—Ç–µ—Å—å! –ú—ã —Ü–µ–Ω–∏–º –º–∞–Ω–µ—Ä—ã ‚òùüèª\n\n"
                     f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–º —Å–ª–æ–≤–æ '–ü—Ä–∏–≤–µ—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–∏–∞–ª–æ–≥–∞")


@bot.on.private_message()
async def confused(msg: Message):
    await msg.answer("–Ø –í–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é.\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–ª–æ–≤–æ '–ü—Ä–∏–≤–µ—Ç' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –∏–ª–∏ '–ú–µ–Ω—é' "
                     "–¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")


@bot.on.raw_event(GroupEventType.GROUP_JOIN, dataclass=GroupTypes.GroupJoin)
async def group_join_handler(event: GroupTypes.GroupJoin):
    try:
        await bot.api.messages.send(
            peer_id=event.object.user_id,
            message="–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É! üî•\n\n–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–æ–∑–¥–æ—Ä–æ–≤–∞–π—Ç–µ—Å—å "
                    "—Å –Ω–∞—à–∏–º –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–º, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ: '–ü—Ä–∏–≤–µ—Ç'",
            random_id=0
        )
    except VKAPIError[901]:
        pass


@bot.on.raw_event(GroupEventType.GROUP_LEAVE, dataclass=GroupTypes.GroupLeave)
async def group_join_handler(event: GroupTypes.GroupLeave):
    try:
        await bot.api.messages.send(
            peer_id=event.object.user_id,
            message="–ù–∞–º –∂–∞–ª—å, —á—Ç–æ –í—ã –æ—Ç–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å... üòû\n"
                    "–ë—É–¥–µ–º –∂–¥–∞—Ç—å –í–∞—Å —Å–Ω–æ–≤–∞, —á—Ç–æ–±—ã –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –æ –Ω–æ–≤–∏–Ω–∫–∞—Ö!\n\n"
                    "–ù–∞—à –æ–Ω–ª–∞–π–Ω-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –í–∞—Å! ü§ñ",
            random_id=0
        )
    except VKAPIError[901]:
        pass


bot.run_forever()
